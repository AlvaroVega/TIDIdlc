/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDIdlc
* Programming Language: Java
*
* File: $Source$
* Version: $Revision$
* Date: $Date$
* Last modified by: $Author$
*
* (C) Copyright 2004 Telef�nica Investigaci�n y Desarrollo
*     S.A.Unipersonal (Telef�nica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDIdlc/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDIdlc/Licensing
*/ 

/* Generated By:JavaCC: Do not edit this line. Idl2Xml.java */
package es.tid.TIDIdlc.idl2xml;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import es.tid.TIDIdlc.CompilerConf;
import es.tid.TIDIdlc.async.ExceptionHolderIdl;
import es.tid.TIDIdlc.async.HandlerCompileThread;
import es.tid.TIDIdlc.async.ReplyHandlerIdl;
import es.tid.TIDIdlc.util.IncludeFileManager;

/**
 * Parser for idl files (CORBA2.6). Generates an Xml representation of the idl 
 * file.
 */
public class Idl2Xml
    implements Idl2XmlNames, Idl2XmlConstants {

    static private Document dom;

    static protected java.util.Stack scopes;

    static protected java.util.Stack prefixes;

    static protected String lastFile = null;

    static private ReplyHandlerIdl handlerIdl;

    static private ExceptionHolderIdl exceptionIdl;

    static private String [] java_words = { "abstract", "boolean", "break",
                                           "byte", "case", "catch", "char",
                                           "class", "const", "continue",
                                           "default", "do", "double", "else",
                                           "extends", "final", "finally",
                                           "float", "for", "goto", "if",
                                           "implements", "import", "instanceof",
                                           "int", "interface", "long", "native",
                                           "new", "package", "private",
                                           "protected", "public", "return",
                                           "short", "static", "super", "switch",
                                           "synchronized", "this", "throw",
                                           "throws", "transient", "try", "void",
                                           "volatile", "while", "true", "false",
                                           "null", "clone", "equals",
                                           "finalize", "getClass", "hashCode",
                                           "notify", "notifyAll", "toString",
                                           "wait"};

    static private String [] cpp_words = { "and", "and_eq", "asm", "auto",
                                          "bitand", "bitor", "bool","break",
                                          "case", "catch", "char", "class",
                                          "compl", "const", "const_cast",
                                          "continue", "default", "delete", "do",
                                          "double", "dynamic_cast", "else",
                                          "enum", "explicit", "export",
                                          "extern", "false", "float", "for",
                                          "friend", "goto", "if", "inline",
                                          "int", "long", "mutable", "namespace",
                                          "new", "not", "not_eq", "operator",
                                          "or", "or_eq", "private", "protected",
                                          "public", "register",
                                          "reinterpret_cast", "return", "short",
                                          "signed", "sizeof", "static",
                                          "static_cast", "struct", "switch",
                                          "template", "this", "throw", "true",
                                          "try", "typedef", "typeid",
                                          "typename", "union", "unsigned",
                                          "using", "virtual", "void",
                                          "volatile", "wchar_t", "while", "xor",
                                          "xor_eq" };

    static private HashSet javawords = new HashSet(Arrays.asList(java_words));

    static private HashSet cppwords = new HashSet(Arrays.asList(cpp_words));


    static private void initDom () {
        if (dom == null) {
            try {
                dom = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            } catch (ParserConfigurationException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (FactoryConfigurationError e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }


    // introducida para poder lanzar varias compilaciones a trav?s 
    // del interfaz con ant
    static public void clearAll()
    {
        dom = null;
        scopes = new java.util.Stack();
        prefixes = new java.util.Stack();
        lastFile = null;
    }

    /**
     * @return DOM (Xml) representation of the Idl file.
     * @throws IOException 
     * @throws FileNotFoundException 
     */
    public Document parse()
        throws ParseException, FileNotFoundException, IOException
    {
        // Argument -async
        if (CompilerConf.getAsynchronous()) {
            String handlerName = "handler.idl";
            String exceptName = "exceptionHolder.idl";
            if (CompilerConf.getFileName() != null) {
                String idlName = CompilerConf.getFileName().substring(0, CompilerConf.getFileName().length()-4);
                handlerName = idlName + "_" + handlerName;
                exceptName = idlName + "_" + exceptName;
            }
                String output_path = CompilerConf.getOutputPath();
                File output_dir = new File(output_path);
                if (!output_dir.exists())
                                                                output_dir.mkdirs();
            handlerIdl = new ReplyHandlerIdl(CompilerConf.getOutputPath() + File.separator + handlerName);
            exceptionIdl =  new ExceptionHolderIdl(CompilerConf.getOutputPath() + File.separator + exceptName);
        }

        clearAll();
        specification();

        // Argument -async
        if (CompilerConf.getAsynchronous()) {
                handlerIdl.createIdlFile();
                exceptionIdl.createIdlFile();
        }

        return dom;
    }

    protected static Element createChild(Node parent, String child)
    {
        initDom ();
        Element childElement = dom.createElement(child);
        parent.appendChild(childElement);
        return childElement;
    }

    static protected void beginScope(Element el, String id)
    {
        initDom ();
        scopes.push(new Object[] { el,id });
    }

    static protected void beginSpecificationScope()
    {
        initDom ();
        Element specification = dom.createElement(OMG_specification);
        scopes.push(new Object[] { specification, null });
    }

    // At the end of a scope, a prefix defined in that scope must be
    // erased from the prefixes stack
    static protected void endScope()
    {
        initDom ();
        Object[] scps = (Object[]) scopes.pop();
        Element el = (Element) scps[0];
        if (!prefixes.empty()) {
            Object[] els = (Object[])prefixes.peek();
            // System.out.println("Fin prefix: " + els[0]);
            // System.out.println("En scope: " + els[1]);
            // System.out.println("Actual scope: " + el);
            if (els[1] == el) {
              prefixes.pop();
            //   System.out.println("Fin prefix: " + els[0]);
            //   System.out.println("En scope: " + els[1]);
            }
        }
    }

    static protected boolean newFile(int lineNumber, boolean modifyLastFile)
    {
        initDom ();
        String file = Preprocessor.getInstance().locateFile(lineNumber);
        if (lastFile == null) {
            if (modifyLastFile)
                lastFile = file;
            return false;
        }
        boolean res = !(lastFile.equals(file));
        if (modifyLastFile)
            lastFile = file;
        return res;
    }

    static protected void usePrefix(Element el, Token actualToken)
    {
        initDom ();
        boolean isNewFile = newFile(actualToken.beginLine, true);
        if (prefixes.empty())
            return;
        Object[] els = (Object[])prefixes.peek();
        String prefix = (String)els[0];
        Element prefixScope = (Element)els[1]; // the scope where the prefix appeared

        if (isNewFile) {
            if (prefixScope.getTagName().equals(OMG_specification)) {
                Object [] scps = (Object []) scopes.peek();
                if ( ((Element) scps[0]).getTagName().equals(OMG_specification))
                    scopes.pop();
                else {
                    Object [] scps_aux = (Object []) scopes.pop();
                    scopes.pop(); // the OMG_specification element
                    scopes.push(scps_aux);
                }
                if (prefix != null) {
                    prefixes.pop();
                    prefixes.push(new Object[]{ null, prefixScope});
                    els = (Object[])prefixes.peek();
                    prefix = (String)els[0];
                    prefixScope = (Element)els[1];
                }
            }
            if (prefix != null) {
                Object [] scps = (Object [])scopes.peek();
                prefixes.push(new Object[]{ null, scps[0] });
            }
            else {
                prefixes.pop();
            }
            if (prefixes.empty())
                return;
            els = (Object[])prefixes.peek();
            prefix = (String)els[0];
            prefixScope = (Element)els[1];
            String scopeSufix = getScopeSufix(el, prefixScope);
            if (scopeSufix !=null)
                if (prefix == null || prefix.equals(""))
                    prefix = scopeSufix;
                else
                    prefix += "/" + scopeSufix;
        }
        else {
            String scopeSufix = getScopeSufix(el, prefixScope);
            if (scopeSufix !=null)
                if (prefix == null || prefix.equals(""))
                    prefix = scopeSufix;
                else
                    prefix += "/" + scopeSufix;
        }

        el.setAttribute(OMG_prefix, prefix);
    }


    // Searches the Element in the scopes stack.
    // It returns the part of the RepositoryId name corresponding to
    // the scopes, appending the names of the scopes in the stack until 
    // the name of the scope in which the prefix appeared is founded.
    // This sufix will be appended to the pragme prefix to obtain 
    // the complete prefix.

    static protected String getScopeSufix(Element actualScope,
                                          Element prefixScope)
    {
        initDom ();
        String scope = "";
        java.util.Stack scopesForPrefix = new java.util.Stack();
        Element e = null;
        Object [] scps;
        boolean restoreScopes = false;
        Object [] firstElement = (Object[]) scopes.peek();
        if (actualScope.equals((Element)firstElement[0])) {
            // if the first element is the actualScope, if must not appear 
            // in the sufix
            firstElement = (Object[]) scopes.pop();
            restoreScopes = true;
        }

        if (scopes.empty()) // Arregla bug en includes complejos - 
                            // dif?cil localizar su origen
            beginSpecificationScope();

        scps = (Object[]) scopes.peek();
        e = (Element) scps[0];
        while (!e.getTagName().equals(OMG_specification)) {
            if (e.equals(prefixScope))
                // if founded, exit from the loop
                break;
            else
                scopesForPrefix.push(scopes.pop());
            if (scopes.empty())
                beginSpecificationScope();
            scps = (Object[])scopes.peek();
            e = (Element) scps[0];
        }

        if (!scopesForPrefix.empty()) {
            while (!scopesForPrefix.empty()) {
                scps = (Object[]) scopesForPrefix.peek();
                String id = (String) scps[1];
                scope += id;
                scopes.push((Object[]) scopesForPrefix.pop());
                if (!scopesForPrefix.empty())
                    scope += "/";
            }
            //System.err.println("ScopePrefix: " + scope);
            if (restoreScopes) {
                scopes.push(firstElement); // Return the first scope to the originary stack
            }
            return scope;
        }
        else {
            if (restoreScopes) {
                scopes.push(firstElement); // Return the first scope to the originary stack
            }
            return null;
        }
    }

    static protected String processReservedNames(String str)
    {
        initDom ();
        if (CompilerConf.getCompilerType().equals("Java")
            && javawords.contains(str))
            return "_" + str;
        else if (CompilerConf.getCompilerType().equals("Cpp")
                 && cppwords.contains(str))
            return "_cxx_" + str;
        else
            return str;
    }

/* Production 1 */
  static final public void specification() throws ParseException {
    initDom ();
    Element specification = createChild(dom, OMG_specification);
    beginScope(specification, null);
    label_1:
    while (true) {
      definition(specification);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 12:
      case 13:
      case 14:
      case 18:
      case 19:
      case 28:
      case 43:
      case 44:
      case 59:
      case 69:
      case 78:
      case 79:
      case PRAGMA_PREFIX:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

/* Production 2 */
  static final public void definition(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRAGMA_PREFIX:
      label_2:
      while (true) {
        jj_consume_token(PRAGMA_PREFIX);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRAGMA_PREFIX:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    if (jj_2_1(2)) {
      type_dcl(parent);
      jj_consume_token(8);
    } else if (jj_2_2(2)) {
      const_dcl(parent);
      jj_consume_token(8);
    } else if (jj_2_3(2)) {
      except_dcl(parent);
      jj_consume_token(8);
    } else if (jj_2_4(2)) {
      interfacex(parent);
      jj_consume_token(8);
    } else if (jj_2_5(2)) {
      module(parent);
      jj_consume_token(8);
    } else if (jj_2_6(2)) {
      value(parent);
      jj_consume_token(8);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 3 */
  static final public void module(Element parent) throws ParseException {
    initDom ();
    Element module = createChild(parent, OMG_module);
    String id;
    jj_consume_token(9);
    id = identifier();
    module.setAttribute("line",Integer.toString(token.beginLine));
    module.setAttribute("column",Integer.toString(token.beginColumn));

    // Option -async
    if (CompilerConf.st_asynchronous)  {
        handlerIdl.addModule(id);
        exceptionIdl.addModule(id);
    }
    jj_consume_token(10);
    beginScope(module,id);
    usePrefix(module, token);
    label_3:
    while (true) {
      definition(module);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 12:
      case 13:
      case 14:
      case 18:
      case 19:
      case 28:
      case 43:
      case 44:
      case 59:
      case 69:
      case 78:
      case 79:
      case PRAGMA_PREFIX:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
    }
    endScope();
    jj_consume_token(11);
    module.setAttribute(OMG_name, id);
    if (id.equals("org") || id.equals("omg")
        || IncludeORB.isHardCodedModule(id)) {
        module.setAttribute(OMG_Do_Not_Generate_Code, "TRUE");
    }
    if (id.equals("java") || id.equals("rmi") || id.equals("io")
        || id.equals("lang")) { // DAVV - para interoperabilidad con JAVA RMI
        String actualFile = "";
        java.util.StringTokenizer tok = new java.util.StringTokenizer(lastFile,
                                                                      java.io.File.separator);
        while (tok.hasMoreTokens()) {
            actualFile = tok.nextToken();
        }
        if (actualFile.equals("orb.idl"))
            module.setAttribute(OMG_Do_Not_Generate_Code, "TRUE");
    }

    String actualFile = "";
    java.util.StringTokenizer tok = new java.util.StringTokenizer(lastFile,
                                                                  java.io.File.separator);
    while (tok.hasMoreTokens()) {
        actualFile = tok.nextToken();
    }
    IncludeFileManager ifm = IncludeFileManager.getInstance();
    ifm.addModuleToIdlFile(actualFile, id);
    module.setAttribute("file_name", actualFile.toString());
  }

/* Production 4 */
  static final public void interfacex(Element definition) throws ParseException {
    initDom ();
    Element interfacex = createChild(definition, OMG_interface);
    interfacex.setAttribute(OMG_fwd, OMG_true);
    String id;
    id = forward_dcl(interfacex);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
    case 15:
      interface_dcl(interfacex,id);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
       // Option -async
        if (CompilerConf.st_asynchronous) {
            handlerIdl.addInterfaceForward(id, interfacex.getAttribute(OMG_abstract),
                                           interfacex.getAttribute(OMG_local));
            exceptionIdl.addInterfaceForward(id, interfacex.getAttribute(OMG_abstract),
                                             interfacex.getAttribute(OMG_local));
        }
  }

/* Production 5 */
  static final public void interface_dcl(Element interfacex, String id) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      inheritance_spec(interfacex);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    // Option -async
    if (CompilerConf.st_asynchronous) {
        handlerIdl.addInterface(id, interfacex.getAttribute(OMG_abstract),
                                interfacex.getAttribute(OMG_local));
        exceptionIdl.addInterface(id, interfacex.getAttribute(OMG_abstract),
                                  interfacex.getAttribute(OMG_local));
    }
    jj_consume_token(10);
    beginScope(interfacex, id);
    usePrefix(interfacex, token);
    interface_body(interfacex);
     endScope();
    jj_consume_token(11);
    interfacex.setAttribute(OMG_fwd, OMG_false);
    interfacex.setAttribute("line", Integer.toString(token.beginLine));
    interfacex.setAttribute("column", Integer.toString(token.beginColumn));
  }

/* Production 6 */
  static final public String forward_dcl(Element interfacex) throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      interfacex.setAttribute(OMG_abstract, OMG_true);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      interfacex.setAttribute(OMG_local, OMG_true);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(14);
    id = identifier();
    interfacex.setAttribute(OMG_name, id);
    interfacex.setAttribute("line", Integer.toString(token.beginLine));
    interfacex.setAttribute("column", Integer.toString(token.beginColumn));
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 7 */
/*
void interface_header(Element interfacex) :
{
  [ inheritance_spec(interfacex) ]
}
*/

/* Production 8 */
  static final public void interface_body(Element parent) throws ParseException {
    initDom ();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 59:
      case 63:
      case 64:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      export(parent);
    }
  }

/* Production 9 */
  static final public void export(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
    case 44:
    case 59:
    case 78:
    case 79:
      type_dcl(parent);
      jj_consume_token(8);
      break;
    case 28:
      const_dcl(parent);
      jj_consume_token(8);
      break;
    case 69:
      except_dcl(parent);
      jj_consume_token(8);
      break;
    case 67:
    case 68:
      attr_dcl(parent);
      jj_consume_token(8);
      break;
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 63:
    case 64:
    case 70:
    case 71:
    case 77:
    case 80:
    case 81:
    case 82:
    case ID:
      op_dcl(parent);
      jj_consume_token(8);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 10 */
  static final public void inheritance_spec(Element interfacex) throws ParseException {
    initDom ();
    Element inheritance_spec = createChild(interfacex, OMG_inheritance_spec);
    String inheritance; String id;
    jj_consume_token(15);
    inheritance = interface_name(inheritance_spec);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      jj_consume_token(16);
      id = interface_name(inheritance_spec);
                         inheritance = inheritance + "," + id;
    }
    // Option -async
    if (CompilerConf.st_asynchronous) {
        handlerIdl.addInheritance(inheritance);
        exceptionIdl.addInheritance(inheritance);
    }
  }

/* Production 11 */
  static final public String interface_name(Element parent) throws ParseException {
    initDom (); String id;
    id = scoped_name(parent);
   {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 12 */
  static final public String scoped_name(Element parent) throws ParseException {
    initDom ();
    String scoped_name = "";
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    id = identifier();
    scoped_name = scoped_name + id;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(17);
      id = identifier();
      scoped_name = scoped_name + "::" + id;
    }
    Element el = createChild(parent, OMG_scoped_name);
    el.setAttribute(OMG_name, scoped_name);
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    {if (true) return scoped_name;}
    throw new Error("Missing return statement in function");
  }

/* Production 13 */
  static final public void value(Element parent) throws ParseException {
    initDom ();
    if (jj_2_7(4)) {
      value_dcl(parent);
    } else if (jj_2_8(4)) {
      value_abs_dcl(parent);
    } else if (jj_2_9(4)) {
      value_box_dcl(parent);
    } else if (jj_2_10(4)) {
      value_forward_dcl(parent);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 14 */
  static final public void value_forward_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_valuetype);
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      el.setAttribute(OMG_abstract, OMG_true);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(18);
    id = identifier();
    el.setAttribute(OMG_name, id);
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    el.setAttribute(OMG_fwd, OMG_true);
  }

/* Production 15 */
  static final public void value_box_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_valuetype);
    String id;
    jj_consume_token(18);
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    el.setAttribute(OMG_boxed, OMG_true);
    type_spec(el);
    el.setAttribute(OMG_name, id);
  }

/* Production 16 */
  static final public void value_abs_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_valuetype);
    el.setAttribute(OMG_abstract, OMG_true);
    String id;
    jj_consume_token(12);
    jj_consume_token(18);
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    value_inheritance_spec(el);
    jj_consume_token(10);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 59:
      case 63:
      case 64:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      export(el);
    }
    jj_consume_token(11);
    el.setAttribute(OMG_name, id);
  }

/* Production 17 */
  static final public void value_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_valuetype);
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    value_header(el);
    jj_consume_token(10);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 22:
      case 23:
      case 24:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 59:
      case 63:
      case 64:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case ID:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      value_element(el);
    }
    jj_consume_token(11);
  }

/* Production 18 */
  static final public void value_header(Element parent) throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      parent.setAttribute(OMG_custom, OMG_true);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(18);
    id = identifier();
    parent.setAttribute("line", Integer.toString(token.beginLine));
    parent.setAttribute("column", Integer.toString(token.beginColumn));
    value_inheritance_spec(parent);
    parent.setAttribute(OMG_name, id);
  }

/* Production 19 */
  static final public void value_inheritance_spec(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_value_inheritance_spec);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
            el.setAttribute(OMG_truncatable, OMG_true);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      value_name(el);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        jj_consume_token(16);
        value_name(el);
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      Element sup = createChild(el, OMG_supports);
      jj_consume_token(21);
      interface_name(sup);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(16);
        interface_name(sup);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

/* Production 20 */
  static final public void value_name(Element parent) throws ParseException {
    initDom ();
    scoped_name(parent);
  }

/* Production 21 */
  static final public void value_element(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 28:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 59:
    case 63:
    case 64:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case ID:
      export(parent);
      break;
    case 22:
    case 23:
      state_member(parent);
      break;
    case 24:
      init_dcl(parent);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 22 */
  static final public void state_member(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_state_member);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      el.setAttribute(OMG_kind, OMG_public);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    case 23:
      jj_consume_token(23);
      el.setAttribute(OMG_kind, OMG_private);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type_spec(el);
    declarators(el);
    jj_consume_token(8);
  }

/* Production 23 */
  static final public void init_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_factory);
    String id;
    jj_consume_token(24);
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      init_param_decls(el);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(26);
    jj_consume_token(8);
    el.setAttribute(OMG_name,id);
  }

/* Production 24 */
  static final public void init_param_decls(Element parent) throws ParseException {
    initDom ();
    init_param_decl(parent);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
          ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      jj_consume_token(16);
      init_param_decl(parent);
    }
  }

/* Production 25 */
  static final public void init_param_decl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_init_param_decl);
    String id;
    init_param_attribute(el);
    param_type_spec(el);
    id = simple_declarator();
    el.setAttribute(OMG_name, id);
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

/* Production 26 */
  static final public void init_param_attribute(Element parent) throws ParseException {
    initDom ();
    parent.setAttribute(OMG_kind, "in");
    jj_consume_token(27);
  }

/* Production 27 */
  static final public void const_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_const_dcl);
    String id;
    jj_consume_token(28);
    const_type(el);
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    jj_consume_token(29);
    const_exp(el);
    el.setAttribute(OMG_name, id);
  }

/* Production 28 */
  static final public void const_type(Element parent) throws ParseException {
    initDom ();
    String id = null;
    if (jj_2_11(2)) {
      id = floating_pt_type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
      case 49:
        id = integer_type();
        break;
      case 50:
        id = char_type();
        break;
      case 51:
        id = wide_char_type();
        break;
      case 52:
        id = boolean_type();
        break;
      case 63:
        string_type(parent);
        break;
      case 64:
        wide_string_type(parent);
        break;
      case 76:
        fixed_pt_const_type(parent);
        break;
      case 17:
      case ID:
        scoped_name(parent);
        break;
      case 53:
        id = octet_type();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (id != null) {
      Element type = createChild(parent, OMG_type);
      type.setAttribute(OMG_kind, id);
      type.setAttribute("line",Integer.toString(token.beginLine));
      type.setAttribute("column",Integer.toString(token.beginColumn));
    }
  }

/* Production 29 */
  static final public void const_exp(Element parent) throws ParseException {
    initDom ();
    Element expr = createChild(parent, OMG_expr);
    Element el;
    el = or_expr();
    expr.appendChild(el);
  }

/* Production 30 */
  static final public Element or_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = xor_expr();
    right = or_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element or_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      left = xor_expr();
      expr = dom.createElement(OMG_or);
      expr.appendChild(el);
      expr.appendChild(left);
      right = or_expr1(expr);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 31 */
  static final public Element xor_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = and_expr();
    right = xor_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element xor_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      left = and_expr();
      expr = dom.createElement(OMG_xor);
      expr.appendChild(el);
      expr.appendChild(left);
      right = xor_expr1(expr);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 32 */
  static final public Element and_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = shift_expr();
    right = and_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element and_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      left = shift_expr();
      expr = dom.createElement(OMG_and);
      expr.appendChild(el);
      expr.appendChild(left);
      right = and_expr1(expr);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 33 */
  static final public Element shift_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = add_expr();
    right = shift_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element shift_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null; String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
    case 34:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
            op=OMG_shiftR;
        break;
      case 34:
        jj_consume_token(34);
                                    op=OMG_shiftL;
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      left = add_expr();
      expr = dom.createElement(op);
      expr.appendChild(el);
      expr.appendChild(left);
      right = shift_expr1(expr);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 34 */
  static final public Element add_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = mult_expr();
    right = add_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element add_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null;
    String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
    case 36:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
           op=OMG_plus;
        break;
      case 36:
        jj_consume_token(36);
                                op=OMG_minus;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      left = mult_expr();
      expr = dom.createElement(op);
      expr.appendChild(el);
      expr.appendChild(left);
      right = add_expr1(expr);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 35 */
  static final public Element mult_expr() throws ParseException {
    initDom ();
    Element left=null, right=null;
    left = unary_expr();
    right = mult_expr1(left);
    {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

  static final public Element mult_expr1(Element el) throws ParseException {
    initDom ();
    Element left=null, right=null, expr=null;
    String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
    case 39:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
           op=OMG_times;
        break;
      case 38:
        jj_consume_token(38);
                                 op=OMG_div;
        break;
      case 39:
        jj_consume_token(39);
                                                     op=OMG_mod;
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      left = unary_expr();
      expr = dom.createElement(op);
      expr.appendChild(el);
      expr.appendChild(left);
      right = mult_expr1(expr);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    if (right == null) {if (true) return el;} else {if (true) return right;}
    throw new Error("Missing return statement in function");
  }

/* Production 36 */
  static final public Element unary_expr() throws ParseException {
    initDom ();
    Element el;
    String id=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
    case 36:
    case 40:
      id = unary_operator();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    el = primary_expr();
    if (id==null) {
      {if (true) return (Element)el.getFirstChild();}
    } else {
      Element operator = dom.createElement(id);
      operator.appendChild((Element)el.getFirstChild());
      {if (true) return operator;}
    }
    throw new Error("Missing return statement in function");
  }

/* Production 37 */
  static final public String unary_operator() throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
          {if (true) return OMG_minus;}
      break;
    case 35:
      jj_consume_token(35);
          {if (true) return OMG_plus;}
      break;
    case 40:
      jj_consume_token(40);
          {if (true) return OMG_not;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 38 */
  static final public Element primary_expr() throws ParseException {
    initDom ();
    Element el = dom.createElement("aux");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case ID:
      scoped_name(el);
      break;
    case 41:
    case 42:
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FIXED:
    case FLOATONE:
    case FLOATTWO:
    case WCHARACTER:
    case CHARACTER:
    case WSTRING:
    case STRING:
      literal(el);
      break;
    case 25:
      jj_consume_token(25);
      const_exp(el);
      jj_consume_token(26);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

/* Production 39 */
  static final public void literal(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
      integer_literal(parent);
      break;
    case STRING:
      string_literal(parent);
      break;
    case WSTRING:
      wide_string_literal(parent);
      break;
    case CHARACTER:
      character_literal(parent);
      break;
    case WCHARACTER:
      wide_character_literal(parent);
      break;
    case FIXED:
      fixed_pt_literal(parent);
      break;
    case FLOATONE:
    case FLOATTWO:
      floating_pt_literal(parent);
      break;
    case 41:
    case 42:
      boolean_literal(parent);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 40 */
  static final public void boolean_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_boolean_literal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    case 42:
      jj_consume_token(42);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 41 */
  static final public void positive_int_const(Element parent) throws ParseException {
    initDom ();
    const_exp(parent);
  }

/* Production 42 */
  static final public void type_dcl(Element parent) throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      type_declarator(parent);
      break;
    case 78:
      struct_type(parent);
      break;
    case 79:
      union_type(parent);
      break;
    case 59:
      enum_type(parent);
      break;
    case 44:
      jj_consume_token(44);
      native_declarator(parent);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 43 */
  static final public void type_declarator(Element parent) throws ParseException {
    initDom ();
    Element el = dom.createElement(OMG_typedef);
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 60:
    case 63:
    case 64:
    case 76:
    case 77:
    case 80:
    case 81:
    case 82:
    case ID:
      simple_type_spec(el);
      break;
    case 59:
    case 78:
    case 79:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 78:
        struct_type(parent);
        break;
      case 79:
        union_type(parent);
        break;
      case 59:
        enum_type(parent);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        Element el2 = createChild(el, OMG_scoped_name);
        el2.setAttribute(OMG_name,((Element)parent.getLastChild()).getAttribute(OMG_name));
        el2.setAttribute("line", Integer.toString(token.beginLine));
        el2.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    declarators(el);
    usePrefix(el, token);
    parent.appendChild(el);
  }

/* Production 44 */
  static final public void type_spec(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 60:
    case 63:
    case 64:
    case 76:
    case 77:
    case 80:
    case 81:
    case 82:
    case ID:
      simple_type_spec(parent);
      break;
    case 59:
    case 78:
    case 79:
      constr_type_spec(parent);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 45 */
  static final public void simple_type_spec(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 77:
    case 80:
    case 81:
    case 82:
      base_type_spec(parent);
      break;
    case 60:
    case 63:
    case 64:
    case 76:
      template_type_spec(parent);
      break;
    case 17:
    case ID:
      scoped_name(parent);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 46 */
  static final public String base_type_spec(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_type);
    String id = null;
    if (jj_2_12(2)) {
      id = floating_pt_type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
      case 49:
        id = integer_type();
        break;
      case 50:
        id = char_type();
        break;
      case 51:
        id = wide_char_type();
        break;
      case 52:
        id = boolean_type();
        break;
      case 53:
        id = octet_type();
        break;
      case 54:
        id = any_type();
        break;
      case 55:
        id = object_type();
        break;
      case 77:
        id = value_base_type();
        break;
      case 80:
        id = typecode_type();
        break;
      case 81:
      case 82:
        id = abstract_base_type(type);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (id!=null) type.setAttribute(OMG_kind,id);
        {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 47 */
  static final public void template_type_spec(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 60:
      sequence_type(parent);
      break;
    case 63:
      string_type(parent);
      break;
    case 64:
      wide_string_type(parent);
      break;
    case 76:
      fixed_pt_type(parent);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 48 */
  static final public void constr_type_spec(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      struct_type(parent);
      break;
    case 79:
      union_type(parent);
      break;
    case 59:
      enum_type(parent);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 49 */
  static final public void declarators(Element parent) throws ParseException {
    initDom ();
    declarator(parent);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_11;
      }
      jj_consume_token(16);
      declarator(parent);
    }
  }

/* Production 50 */
  static final public void declarator(Element parent) throws ParseException {
    initDom ();
    String id;
    if (jj_2_13(2)) {
      complex_declarator(parent);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        id = simple_declarator();
        Element el = createChild(parent, OMG_simple_declarator);
        el.setAttribute(OMG_name, id);
        el.setAttribute("line",Integer.toString(token.beginLine));
        el.setAttribute("column",Integer.toString(token.beginColumn));
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 51 */
  static final public String simple_declarator() throws ParseException {
    initDom ();
    String id;
    id = identifier();
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 52 */
  static final public void complex_declarator(Element parent) throws ParseException {
    initDom ();
    array_declarator(parent);
  }

/* Production 53 */
  static final public String floating_pt_type() throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
               {if (true) return OMG_float;}
      break;
    case 46:
      jj_consume_token(46);
                {if (true) return OMG_double;}
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(46);
                      {if (true) return OMG_longdouble;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 54 */
  static final public String integer_type() throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
      id = signed_int();
      break;
    case 49:
      id = unsigned_int();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 55 */
  static final public String signed_int() throws ParseException {
    initDom ();
    String id;
    if (jj_2_14(2)) {
      id = signed_longlong_int();
    } else if (jj_2_15(2)) {
      id = signed_long_int();
    } else if (jj_2_16(2)) {
      id = signed_short_int();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 56 */
  static final public String signed_short_int() throws ParseException {
    initDom ();
    jj_consume_token(48);
            {if (true) return OMG_short;}
    throw new Error("Missing return statement in function");
  }

/* Production 57 */
  static final public String signed_long_int() throws ParseException {
    initDom ();
    jj_consume_token(47);
           {if (true) return OMG_long;}
    throw new Error("Missing return statement in function");
  }

/* Production 58 */
  static final public String signed_longlong_int() throws ParseException {
    initDom ();
    jj_consume_token(47);
    jj_consume_token(47);
                  {if (true) return OMG_longlong;}
    throw new Error("Missing return statement in function");
  }

/* Production 59 */
  static final public String unsigned_int() throws ParseException {
    initDom ();
    String id;
    if (jj_2_17(3)) {
      id = unsigned_longlong_int();
    } else if (jj_2_18(3)) {
      id = unsigned_long_int();
    } else if (jj_2_19(3)) {
      id = unsigned_short_int();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 60 */
  static final public String unsigned_short_int() throws ParseException {
    initDom ();
    jj_consume_token(49);
    jj_consume_token(48);
                       {if (true) return OMG_unsignedshort;}
    throw new Error("Missing return statement in function");
  }

/* Production 61 */
  static final public String unsigned_long_int() throws ParseException {
    initDom ();
    jj_consume_token(49);
    jj_consume_token(47);
                      {if (true) return OMG_unsignedlong;}
    throw new Error("Missing return statement in function");
  }

/* Production 62 */
  static final public String unsigned_longlong_int() throws ParseException {
    initDom ();
    jj_consume_token(49);
    jj_consume_token(47);
    jj_consume_token(47);
                             {if (true) return OMG_unsignedlonglong;}
    throw new Error("Missing return statement in function");
  }

/* Production 63 */
  static final public String char_type() throws ParseException {
    initDom ();
    jj_consume_token(50);
           {if (true) return OMG_char;}
    throw new Error("Missing return statement in function");
  }

/* Production 64 */
  static final public String wide_char_type() throws ParseException {
    initDom ();
    jj_consume_token(51);
             {if (true) return OMG_wchar;}
    throw new Error("Missing return statement in function");
  }

/* Production 65 */
  static final public String boolean_type() throws ParseException {
    initDom ();
    jj_consume_token(52);
              {if (true) return OMG_boolean;}
    throw new Error("Missing return statement in function");
  }

/* Production 66 */
  static final public String octet_type() throws ParseException {
    initDom ();
    jj_consume_token(53);
             {if (true) return OMG_octet;}
    throw new Error("Missing return statement in function");
  }

/* Production 67 */
  static final public String any_type() throws ParseException {
    initDom ();
    jj_consume_token(54);
           {if (true) return OMG_any;}
    throw new Error("Missing return statement in function");
  }

/* Production 68 */
  static final public String object_type() throws ParseException {
    initDom ();
    jj_consume_token(55);
              {if (true) return OMG_Object;}
    throw new Error("Missing return statement in function");
  }

/* Production 69 */
  static final public void struct_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_struct);
    type.setAttribute(OMG_fwd, OMG_true);
    type.setAttribute("line", Integer.toString(token.beginLine));
    type.setAttribute("column", Integer.toString(token.beginColumn));
    String id;
    id = struct_forward_decl(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
    beginScope(type,id);usePrefix(type, token);
      member_list(type);
    endScope();
      jj_consume_token(11);
    type.setAttribute(OMG_fwd,OMG_false);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
  }

/* Production 70 */
  static final public void member_list(Element parent) throws ParseException {
    initDom ();
    label_12:
    while (true) {
      member(parent);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 59:
      case 60:
      case 63:
      case 64:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case ID:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_12;
      }
    }
  }

/* Production 71 */
  static final public void member(Element parent) throws ParseException {
    initDom ();
    type_spec(parent);
    declarators(parent);
    jj_consume_token(8);
  }

/* Production 72 */
  static final public void union_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_union);
    type.setAttribute(OMG_fwd, OMG_true);
    type.setAttribute("line", Integer.toString(token.beginLine));
    type.setAttribute("column", Integer.toString(token.beginColumn));
    String id;
    id = union_forward_decl(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      jj_consume_token(25);
      beginScope(type,id);
      usePrefix(type, token);
      switch_type_spec(type);
      jj_consume_token(26);
      jj_consume_token(10);
      switch_body(type);
      endScope();
      jj_consume_token(11);
      type.setAttribute(OMG_fwd, OMG_false);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  }

/* Production 73 */
  static final public void switch_type_spec(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_switch);
    String id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
    case 49:
      id = integer_type();
      break;
    case 50:
      id = char_type();
      break;
    case 52:
      id = boolean_type();
      break;
    case 59:
      enum_type(el);
      break;
    case 17:
    case ID:
      scoped_name(el);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (id != null) {
      Element type = createChild(el, OMG_type);
      type.setAttribute(OMG_kind, id);
      type.setAttribute("line", Integer.toString(token.beginLine));
      type.setAttribute("column", Integer.toString(token.beginColumn));
    }
  }

/* Production 74 */
  static final public void switch_body(Element parent) throws ParseException {
    initDom ();
    label_13:
    while (true) {
      casex(parent);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_13;
      }
    }
  }

/* Production 75 */
  static final public void casex(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_case);
    label_14:
    while (true) {
      case_label(el);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_14;
      }
    }
    element_spec(el);
    jj_consume_token(8);
  }

/* Production 76 */
  static final public void case_label(Element parent) throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      const_exp(parent);
      jj_consume_token(15);
      break;
    case 58:
      jj_consume_token(58);
      jj_consume_token(15);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 77 */
  static final public void element_spec(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_element_spec);
    type_spec(el);
    declarator(el);
  }

/* Production 78 */
  static final public void enum_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_enum);
    String id;
    jj_consume_token(59);
    id = identifier();
    type.setAttribute("line",Integer.toString(token.beginLine));
    type.setAttribute("column",Integer.toString(token.beginColumn));
    jj_consume_token(10);
    usePrefix(type, token);
    enumerator(type);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_15;
      }
      jj_consume_token(16);
      enumerator(type);
    }
    jj_consume_token(11);
    type.setAttribute(OMG_name, id);
  }

/* Production 79 */
  static final public void enumerator(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_enumerator);
    String id;
    id = identifier();
    type.setAttribute(OMG_name, id);
    type.setAttribute("line", Integer.toString(token.beginLine));
    type.setAttribute("column", Integer.toString(token.beginColumn));
  }

/* Production 80 */
  static final public void sequence_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_sequence);
    jj_consume_token(60);
    jj_consume_token(61);
    simple_type_spec(type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      positive_int_const(type);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(62);
  }

/* Production 81 */
  static final public String string_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_type);
    type.setAttribute(OMG_kind, OMG_string);
    jj_consume_token(63);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      jj_consume_token(61);
      positive_int_const(type);
      jj_consume_token(62);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
   {if (true) return OMG_string;}
    throw new Error("Missing return statement in function");
  }

/* Production 82 */
  static final public String wide_string_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_type);
    type.setAttribute(OMG_kind, OMG_wstring);
    jj_consume_token(64);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 61:
      jj_consume_token(61);
      positive_int_const(type);
      jj_consume_token(62);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    {if (true) return OMG_wstring;}
    throw new Error("Missing return statement in function");
  }

/* Production 83 */
  static final public void array_declarator(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_array);
    String id;
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    label_16:
    while (true) {
      fixed_array_size(el);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_16;
      }
    }
    el.setAttribute(OMG_name, id);
  }

/* Production 84 */
  static final public void fixed_array_size(Element parent) throws ParseException {
    initDom ();
    jj_consume_token(65);
    positive_int_const(parent);
    jj_consume_token(66);
  }

/* Production 85 */
  static final public void attr_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_attr_dcl);
    String id, type;
    String id2;
    Element el2, el3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      el.setAttribute(OMG_readonly, OMG_true);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    jj_consume_token(68);
    type = param_type_spec(el);
    id = simple_declarator();
    el2 = createChild(el, OMG_attribute);
    el2.setAttribute(OMG_name, id);
    el2.setAttribute("line", Integer.toString(token.beginLine));
    el2.setAttribute("column", Integer.toString(token.beginColumn));
    // Option -async
    if (CompilerConf.st_asynchronous) {
        handlerIdl.addAttribute(id, type, el.getAttribute(OMG_readonly));
        exceptionIdl.addAttribute(id, type, el.getAttribute(OMG_readonly));
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_17;
      }
      jj_consume_token(16);
      id2 = simple_declarator();
      el3 = createChild(el, OMG_attribute);
      el3.setAttribute(OMG_name, id2);
      el3.setAttribute("line", Integer.toString(token.beginLine));
      el3.setAttribute("column", Integer.toString(token.beginColumn));

      // Option -async
      if (CompilerConf.st_asynchronous) {
          handlerIdl.addAttribute(id2, type, el.getAttribute(OMG_readonly));
          exceptionIdl.addAttribute(id2, type, el.getAttribute(OMG_readonly));
      }
    }
  }

/* Production 86 */
  static final public void except_dcl(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_exception);
    String id;
    jj_consume_token(69);
    id = identifier();
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
    jj_consume_token(10);
    beginScope(el,id);
    usePrefix(el, token);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 59:
      case 60:
      case 63:
      case 64:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case ID:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_18;
      }
      member(el);
    }
    endScope();
    jj_consume_token(11);
    el.setAttribute(OMG_name, id);
    // Option -async
    if (CompilerConf.st_asynchronous && parent.getTagName().equals(OMG_interface)) {
        exceptionIdl.addExceptionDclInterface(id);
    }
  }

/* Production 87 */
  static final public void op_dcl(Element parent) throws ParseException {
    initDom ();
    Element op_dcl = createChild(parent, OMG_op_dcl);
    String id, type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
      op_attribute(op_dcl);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    type = op_type_spec(op_dcl);
    id = identifier();
    op_dcl.setAttribute("line", Integer.toString(token.beginLine));
    op_dcl.setAttribute("column", Integer.toString(token.beginColumn));

    // Option -async and isn?t a oneway operation
    if (CompilerConf.st_asynchronous && op_dcl.getAttribute(OMG_oneway).compareTo(OMG_true) != 0) {
        handlerIdl.addOperation(id, type);
        exceptionIdl.addOperation(id, type);
    }
    parameter_dcls(op_dcl);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 74:
      raises_expr(op_dcl);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 75:
      context_expr(op_dcl);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    op_dcl.setAttribute(OMG_name, id);
  }

/* Production 88 */
  static final public void op_attribute(Element parent) throws ParseException {
    initDom ();
    parent.setAttribute(OMG_oneway, OMG_true);
    jj_consume_token(70);
  }

/* Production 89 */
  static final public String op_type_spec(Element parent) throws ParseException {
    initDom ();
    Element returnType = createChild(parent, OMG_returnType);
    String ret = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 63:
    case 64:
    case 77:
    case 80:
    case 81:
    case 82:
    case ID:
      ret = param_type_spec(returnType);
      break;
    case 71:
      jj_consume_token(71);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/* Production 90 */
  static final public void parameter_dcls(Element parent) throws ParseException {
    initDom ();
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 72:
    case 73:
      param_dcl(parent);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_19;
        }
        jj_consume_token(16);
        param_dcl(parent);
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(26);
  }

/* Production 91 */
  static final public void param_dcl(Element parent) throws ParseException {
    initDom ();
    Element param = createChild(parent, OMG_parameter);
    String id, id2, type;
    id = param_attribute();
    type = param_type_spec(param);
    id2 = simple_declarator();
    param.setAttribute(OMG_kind, id);
    param.setAttribute(OMG_name, id2);
    param.setAttribute("line",Integer.toString(token.beginLine));
    param.setAttribute("column",Integer.toString(token.beginColumn));

    // Option -async and isn?t a oneway operation
    if (CompilerConf.st_asynchronous && parent.getAttribute(OMG_oneway).compareTo(OMG_true) != 0)
            handlerIdl.addParameterOper(id2, type, id);
  }

/* Production 92 */
  static final public String param_attribute() throws ParseException {
    initDom ();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      break;
    case 72:
      jj_consume_token(72);
      break;
    case 73:
      jj_consume_token(73);
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/* Production 93 */
  static final public void raises_expr(Element parent) throws ParseException {
    initDom ();
    Element raises = createChild(parent, OMG_raises);
    String excep;
    jj_consume_token(74);
    jj_consume_token(25);
    excep = scoped_name(raises);
    // Option -async and isn't a oneway operation
    if (CompilerConf.st_asynchronous && parent.getAttribute(OMG_oneway).compareTo(OMG_true) != 0) {
        exceptionIdl.addExceptionOper(excep);
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_20;
      }
      jj_consume_token(16);
      excep = scoped_name(raises);
      // Option -async and isn't a oneway operation
      if (CompilerConf.st_asynchronous && parent.getAttribute(OMG_oneway).compareTo(OMG_true) != 0) {
                exceptionIdl.addExceptionOper(excep);
      }
    }
    jj_consume_token(26);
  }

/* Production 94 */
  static final public void context_expr(Element parent) throws ParseException {
    initDom ();
    Element raises = createChild(parent, OMG_context);
    jj_consume_token(75);
    jj_consume_token(25);
    string_literal(parent);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_21;
      }
      jj_consume_token(16);
      string_literal(parent);
    }
    jj_consume_token(26);
  }

/* Production 95 */
  static final public String param_type_spec(Element parent) throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      id = string_type(parent);
      break;
    case 64:
      id = wide_string_type(parent);
      break;
    case 17:
    case ID:
      id = scoped_name(parent);
      break;
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 77:
    case 80:
    case 81:
    case 82:
      id = base_type_spec(parent);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Production 96 */
  static final public void fixed_pt_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_type);
    type.setAttribute(OMG_kind, OMG_fixed);
    jj_consume_token(76);
    jj_consume_token(61);
    positive_int_const(type);
    jj_consume_token(16);
    positive_int_const(type);
    jj_consume_token(62);
  }

/* Production 97 */
  static final public void fixed_pt_const_type(Element parent) throws ParseException {
    initDom ();
    Element type = createChild(parent, OMG_type);
    type.setAttribute(OMG_kind, OMG_fixed);
    jj_consume_token(76);
  }

/* Production 98 */
  static final public String value_base_type() throws ParseException {
    initDom ();
    jj_consume_token(77);
    {if (true) return OMG_ValueBase;}
    throw new Error("Missing return statement in function");
  }

/* Production 99 */
  static final public String struct_forward_decl(Element type) throws ParseException {
    initDom ();
    String id;
    jj_consume_token(78);
    id = identifier();
    type.setAttribute(OMG_name, id);
    type.setAttribute("line",Integer.toString(token.beginLine));
    type.setAttribute("column",Integer.toString(token.beginColumn));
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  static final public String union_forward_decl(Element type) throws ParseException {
    initDom ();
    String id;
    jj_consume_token(79);
    id = identifier();
    type.setAttribute(OMG_name, id);
    type.setAttribute("line", Integer.toString(token.beginLine));
    type.setAttribute("column", Integer.toString(token.beginColumn));
    {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

/* Extra Production for TypeCode */
  static final public String typecode_type() throws ParseException {
    initDom ();
    jj_consume_token(80);
    {if (true) return OMG_TypeCode;}
    throw new Error("Missing return statement in function");
  }

/* Extra Production for AbstractBase */
  static final public void native_declarator(Element parent) throws ParseException {
    initDom ();
    String id;
    if (jj_2_20(2)) {
      id = abstract_base_dcl();
      Element type = createChild(parent, OMG_native);
      if (id!=null) {
          type.setAttribute(OMG_kind,id);
      }
      type.setAttribute(OMG_name, "AbstractBase");
      type.setAttribute("line", Integer.toString(token.beginLine));
      type.setAttribute("column", Integer.toString(token.beginColumn));
    } else if (jj_2_21(2)) {
      id = simple_declarator();
      Element el = createChild(parent, OMG_native);
      el.setAttribute(OMG_name,id);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String abstract_base_dcl() throws ParseException {
    initDom ();
    jj_consume_token(81);
                    {if (true) return OMG_AbstractBaseCode;}
    throw new Error("Missing return statement in function");
  }

  static final public String abstract_base_type(Element type) throws ParseException {
    initDom ();
    String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 82:
      jj_consume_token(82);
    id="CORBA::AbstractBase";
      break;
    case 81:
      jj_consume_token(81);
    id="AbstractBase";
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type.setAttribute(OMG_name, id);
    type.setAttribute("line", Integer.toString(token.beginLine));
    type.setAttribute("column", Integer.toString(token.beginColumn));
    {if (true) return OMG_AbstractBaseCode;}
    throw new Error("Missing return statement in function");
  }

/* Definitions of complex regular expressions follow */
  static final public String identifier() throws ParseException {
    initDom ();
    jj_consume_token(ID);
    {if (true) return processReservedNames(token.image);}
    throw new Error("Missing return statement in function");
  }

  static final public void integer_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_integer_literal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      jj_consume_token(OCTALINT);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    case DECIMALINT:
      jj_consume_token(DECIMALINT);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    case HEXADECIMALINT:
      jj_consume_token(HEXADECIMALINT);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void string_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_string_literal);
    jj_consume_token(STRING);
    el.setAttribute(OMG_value, token.image.substring(1,token.image.length()-1));
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

  static final public void wide_string_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_wide_string_literal);
    jj_consume_token(WSTRING);
    el.setAttribute(OMG_value, token.image.substring(2,token.image.length()-1));
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

  static final public void character_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_character_literal);
    jj_consume_token(CHARACTER);
    el.setAttribute(OMG_value, token.image.substring(1,token.image.length()-1));
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

  static final public void wide_character_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_wide_character_literal);
    jj_consume_token(WCHARACTER);
    el.setAttribute(OMG_value, token.image.substring(2,token.image.length()-1));
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

  static final public void fixed_pt_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_fixed_pt_literal);
    jj_consume_token(FIXED);
    el.setAttribute(OMG_value, token.image.substring(0,token.image.length()-1));
    el.setAttribute("line", Integer.toString(token.beginLine));
    el.setAttribute("column", Integer.toString(token.beginColumn));
  }

  static final public void floating_pt_literal(Element parent) throws ParseException {
    initDom ();
    Element el = createChild(parent, OMG_floating_pt_literal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATONE:
      jj_consume_token(FLOATONE);
        el.setAttribute(OMG_value, token.image);
        el.setAttribute("line", Integer.toString(token.beginLine));
        el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    case FLOATTWO:
      jj_consume_token(FLOATTWO);
      el.setAttribute(OMG_value, token.image);
      el.setAttribute("line", Integer.toString(token.beginLine));
      el.setAttribute("column", Integer.toString(token.beginColumn));
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_3R_149() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(15)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_75()) return true;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_3R_50()) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(11)) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_3R_84()) return true;
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_scan_token(76)) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_3R_125()) return true;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_3R_90()) return true;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_3R_83()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_28()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_3R_158()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  static final private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_3R_128()) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_3R_127()) return true;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_3R_39()) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_3R_38()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_117()) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_3R_116()) return true;
    return false;
  }

  static final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_3R_58()) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_49()) return true;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_90()) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_3R_85()) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_3R_48()) return true;
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_3R_152()) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_3R_90()) return true;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_3R_151()) return true;
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_150()) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_3R_149()) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_3R_148()) return true;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_3R_147()) return true;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_3R_146()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_3R_92()) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_3R_86()) return true;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(63)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_3R_85()) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_27()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_26()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_25()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(61)) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_3R_91()) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_126()) return true;
    return false;
  }

  static final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_3R_125()) return true;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_96()) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  static final private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_61()) return true;
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_60()) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_41()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_96()) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_3R_108()) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_3R_107()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public Idl2XmlTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[81];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100c7200,0x0,0x0,0x100c7200,0x8400,0x8000,0x1000,0x2000,0x10020000,0x10020000,0x10000,0x20000,0x20000,0x1000,0x10020000,0x11c20000,0x80000,0x100000,0x10000,0x8000,0x10000,0x200000,0x11c20000,0xc00000,0x8000000,0x10000,0x20000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2020000,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x400,0x20000,0x0,0x20000,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x10000,0x20000,0x0,0x0,0x0,0x20000,0x10000,0x8000000,0x8000000,0x10000,0x10000,0x20000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x8001800,0x0,0x0,0x8001800,0x0,0x0,0x0,0x0,0x88fff800,0x88fff800,0x0,0x0,0x0,0x0,0x88fff800,0x88fff800,0x0,0x0,0x0,0x0,0x0,0x0,0x88fff800,0x0,0x0,0x0,0x803f8000,0x0,0x0,0x1,0x6,0x6,0x18,0x18,0xe0,0xe0,0x118,0x118,0x600,0x600,0x600,0x8001800,0x8000000,0x98ffe000,0x98ffe000,0x90ffe000,0xff8000,0x90000000,0x8000000,0x0,0x0,0xe000,0x38000,0x0,0x98ffe000,0x1000000,0x8178000,0x6000000,0x6000000,0x6000000,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x98ffe000,0x0,0x0,0x0,0x80ffe000,0x0,0x0,0x0,0x0,0x0,0x80ffe000,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0xc020,0x0,0x0,0xc020,0x0,0x0,0x0,0x0,0xfe0f9,0xfe0f9,0x0,0x0,0x0,0x0,0xfe0f9,0xfe0f9,0x0,0x0,0x0,0x0,0x0,0x0,0xfe0f9,0x0,0x0,0x0,0x81001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ff80000,0x3ff00000,0x0,0xc000,0xc000,0xff001,0xff001,0xf3001,0x72000,0x1001,0xc000,0x0,0x80000,0x0,0x0,0x0,0xff001,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x0,0xff001,0x40,0x400,0x800,0xf2081,0x0,0x300,0x300,0x0,0x0,0xf2001,0x60000,0x700000,0x3000000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x4,0x4,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[21];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Idl2Xml(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Idl2XmlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Idl2Xml(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Idl2XmlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Idl2Xml(Idl2XmlTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(Idl2XmlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 81; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[102];
    for (int i = 0; i < 102; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 81; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

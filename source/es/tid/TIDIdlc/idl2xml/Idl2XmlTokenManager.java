/*
* MORFEO Project
* http://www.morfeo-project.org
*
* Component: TIDIdlc
* Programming Language: Java
*
* File: $Source$
* Version: $Revision: 305 $
* Date: $Date: 2009-05-22 14:07:39 +0200 (Fri, 22 May 2009) $
* Last modified by: $Author: avega $
*
* (C) Copyright 2004 Telefónica Investigación y Desarrollo
*     S.A.Unipersonal (Telefónica I+D)
*
* Info about members and contributors of the MORFEO project
* is available at:
*
*   http://www.morfeo-project.org/TIDIdlc/CREDITS
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*
* If you want to use this software an plan to distribute a
* proprietary application in any way, and you are not licensing and
* distributing your source code under GPL, you probably need to
* purchase a commercial license of the product.  More info about
* licensing options is available at:
*
*   http://www.morfeo-project.org/TIDIdlc/Licensing
*/ 

/* Generated By:JavaCC: Do not edit this line. Idl2XmlTokenManager.java */
package es.tid.TIDIdlc.idl2xml;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import es.tid.TIDIdlc.CompilerConf;
import es.tid.TIDIdlc.async.ExceptionHolderIdl;
import es.tid.TIDIdlc.async.HandlerCompileThread;
import es.tid.TIDIdlc.async.ReplyHandlerIdl;
import es.tid.TIDIdlc.util.IncludeFileManager;

public class Idl2XmlTokenManager implements Idl2XmlConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(4, 0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 2:
                  if (curChar == 10 && kind > 99)
                     kind = 99;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x9ffffe0019fc7200L) != 0L || (active1 & 0x7fff9L) != 0L)
         {
            jjmatchedKind = 83;
            return 13;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 54;
         if ((active1 & 0x40000000L) != 0L)
            return 108;
         return -1;
      case 1:
         if ((active0 & 0x9ffffe0011fc3200L) != 0L || (active1 & 0x7fdf9L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return 13;
         }
         if ((active0 & 0x8004000L) != 0L || (active1 & 0x200L) != 0L)
            return 13;
         return -1;
      case 2:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 13;
         if ((active0 & 0x9fbffe0011fc7200L) != 0L || (active1 & 0x7fef9L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 2;
            return 13;
         }
         return -1;
      case 3:
         if ((active0 & 0x95bb7c0011fc7200L) != 0L || (active1 & 0x7fe79L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
            return 13;
         }
         if ((active0 & 0xa04820000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active0 & 0x9592580001fc5200L) != 0L || (active1 & 0x76c79L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
            return 13;
         }
         if ((active0 & 0x29240010002000L) != 0L || (active1 & 0x9200L) != 0L)
            return 13;
         return -1;
      case 5:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x8180500000480200L) != 0L || (active1 & 0x4440L) != 0L)
            return 13;
         if ((active0 & 0x1412080001b45000L) != 0L || (active1 & 0x22839L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
            return 13;
         }
         return -1;
      case 6:
         if ((active0 & 0x1002000000345000L) != 0L || (active1 & 0x22038L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
            return 13;
         }
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x410080001800000L) != 0L || (active1 & 0x801L) != 0L)
            return 13;
         return -1;
      case 7:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x144000L) != 0L || (active1 & 0x22030L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
            return 13;
         }
         if ((active0 & 0x1002000000201000L) != 0L || (active1 & 0x8L) != 0L)
            return 13;
         return -1;
      case 8:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x44000L) != 0L || (active1 & 0x2030L) != 0L)
            return 13;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
            return 13;
         }
         return -1;
      case 9:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 9;
            return 13;
         }
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
            return 13;
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 10;
            return 13;
         }
         return -1;
      case 11:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x20000L) != 0L)
            return 13;
         return -1;
      case 12:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x50000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 37:
         return jjStopAtPos(0, 39);
      case 38:
         return jjStopAtPos(0, 32);
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 26);
      case 42:
         return jjStopAtPos(0, 37);
      case 43:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 16);
      case 45:
         return jjStopAtPos(0, 36);
      case 47:
         return jjStartNfaWithStates_0(0, 38, 54);
      case 58:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 8);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 29);
      case 62:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x50000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 91:
         return jjStopAtPos(0, 65);
      case 93:
         return jjStopAtPos(0, 66);
      case 94:
         return jjStopAtPos(0, 31);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000000001000L, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x204000010080000L, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400400000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x20L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200001000000L, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8004000L, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000002000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x140L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x408L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x9101000000200000L, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000100000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x80L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x1L);
      case 123:
         return jjStopAtPos(0, 10);
      case 124:
         return jjStopAtPos(0, 30);
      case 125:
         return jjStopAtPos(0, 11);
      case 126:
         return jjStopAtPos(0, 40);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 60:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x50000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200100001040000L, active1, 0x2400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000001000L, active1, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000000000000L, active1, 0x8L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x842000000004000L, active1, 0x8240L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c00010002200L, active1, 0x880L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x4010L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x680000L, active1, 0x100L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x50000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002000L, active1, 0x20L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000800000L, active1, 0x8480L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000000L, active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x11200000000000L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000200000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x40004000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000000081000L, active1, 0x20000L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x20100000004000L, active1, 0x11L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800400000100000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x50000L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 13);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x408200000002000L, active1, 0x40000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0080000004000L, active1, 0x1020L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8002100000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000400000L, active1, 0L);
      case 109:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 13);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 13);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x11L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000001081000L, active1, 0x20800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000040200L, active1, 0x6200L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x50000L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000100000L, active1, 0x4000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000000040000L, active1, 0x2c00L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x11L);
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000200L, active1, 0L);
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1280000L, active1, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 13);
         return jjMoveStringLiteralDfa5_0(active0, 0x5000L, active1, 0x20000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 13);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 13);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 13);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 13);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 13);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x50000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000101000L, active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 13);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 13);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 13);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 13);
         break;
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 13);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000000000000L, active1, 0x9L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1200000L, active1, 0L);
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 13);
         break;
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 13);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 13);
         return jjMoveStringLiteralDfa6_0(active0, 0x840000L, active1, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 121:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x50000L);
      case 97:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 94);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000001000L, active1, 0x20000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 13);
         break;
      case 103:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 13);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 13);
         break;
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 13);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x300000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 13);
         break;
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 13);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 13);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20010L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0x40000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 13);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 13);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 13);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 13);
         break;
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 13);
         break;
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 13);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active1, 0x10000L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 13);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
static private final int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
static private final int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
static private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(14, 80);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private final int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private final int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private final int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa18_0(active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private final int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(18, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 108;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 12);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(64, 66);
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 39)
                     jjAddStates(18, 19);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(1, 2);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(18, 19);
                  }
                  else if (curChar == 48)
                     jjAddStates(20, 21);
                  if (curChar == 48)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 7:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 32);
                  break;
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 7);
                  break;
               case 11:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(36, 40);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar != 48)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 24:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 39)
                     jjAddStates(18, 19);
                  break;
               case 27:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if (curChar == 39 && kind > 91)
                     kind = 91;
                  break;
               case 30:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(32, 28);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 28);
                  break;
               case 33:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 28);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 28);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 28);
                  break;
               case 37:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 17);
                  break;
               case 38:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 40:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 41:
                  if (curChar != 34)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 42:
                  if (curChar == 48)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 48);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 48);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 48:
                  if (curChar == 48)
                     jjAddStates(20, 21);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjAddStates(53, 54);
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 55:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 42)
                     jjAddStates(55, 56);
                  break;
               case 60:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 61:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 62:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 63:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(64, 66);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(57, 59);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddTwoStates(69, 70);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 12);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(74, 65);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 65);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 65);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 77:
                  if (curChar != 46)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(60, 62);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAddStates(60, 62);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(84, 85);
                  break;
               case 87:
                  if (curChar == 39)
                     jjAddStates(63, 64);
                  break;
               case 88:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 90:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 91:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(92, 22);
                  break;
               case 92:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 22);
                  break;
               case 93:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 22);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 22);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 22);
                  break;
               case 97:
                  if (curChar == 34)
                     jjCheckNAddStates(65, 67);
                  break;
               case 98:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 100:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 101:
                  if (curChar != 34)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 102:
                  if (curChar == 48)
                     jjCheckNAdd(103);
                  break;
               case 103:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 71);
                  break;
               case 104:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 79);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(13);
                  }
                  if (curChar == 76)
                     jjAddStates(80, 81);
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 5:
                  jjAddStates(82, 83);
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0x20100000201000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 19:
                  if ((0x20100000201000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 20:
                  if (curChar == 117)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 92)
                     jjAddStates(84, 87);
                  break;
               case 30:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 35:
                  if (curChar == 120)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(36, 28);
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 39:
                  if (curChar == 92)
                     jjAddStates(88, 91);
                  break;
               case 40:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 46:
                  if (curChar == 120)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 49:
                  if (curChar == 120)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if ((0x20100000201000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 52:
                  if (curChar == 88)
                     jjCheckNAdd(50);
                  break;
               case 55:
                  jjAddStates(92, 93);
                  break;
               case 58:
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  jjCheckNAddTwoStates(61, 59);
                  break;
               case 65:
                  if ((0x1000000010L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 70:
                  if ((0x104000001040L & l) != 0L && kind > 88)
                     kind = 88;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 85:
                  if ((0x104000001040L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 86:
                  if (curChar == 76)
                     jjAddStates(80, 81);
                  break;
               case 88:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 89:
                  if (curChar == 92)
                     jjAddStates(98, 101);
                  break;
               case 90:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 95:
                  if (curChar == 120)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(96, 22);
                  break;
               case 98:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 99:
                  if (curChar == 92)
                     jjAddStates(102, 105);
                  break;
               case 100:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 106:
                  if ((0x120000000000000L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(76, 79);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 17);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 88:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 98:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(65, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 108 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(2, 0);
}
static private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 10)
                  {
                     if (kind > 101)
                        kind = 101;
                  }
                  break;
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 10)
                     kind = 101;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(17, 0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAddStates(106, 111);
                  break;
               case 1:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 18:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(112, 114);
                  break;
               case 19:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(19, 16);
                  break;
               case 20:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 68)
                     break;
                  kind = 95;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar != 110)
                     break;
                  kind = 95;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar != 120)
                     break;
                  kind = 96;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     jjCheckNAddStates(115, 117);
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(115, 117);
                  break;
               case 3:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(115, 117);
                  break;
               case 4:
                  if (curChar != 34)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 48)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(118, 121);
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(122, 125);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(122, 125);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(115, 117);
                  break;
               case 2:
                  if (curChar == 92)
                     jjAddStates(130, 133);
                  break;
               case 3:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(115, 117);
                  break;
               case 9:
                  if (curChar == 120)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(115, 117);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(4, 0);
}
static private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 2:
                  if (curChar == 10 && kind > 100)
                     kind = 100;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   0, 1, 3, 72, 73, 75, 65, 76, 77, 79, 80, 81, 82, 54, 57, 38, 
   39, 41, 27, 29, 49, 52, 2, 3, 4, 7, 7, 8, 11, 9, 10, 7, 
   8, 9, 10, 7, 9, 10, 7, 8, 11, 38, 39, 43, 41, 38, 39, 45, 
   41, 38, 39, 47, 41, 50, 51, 60, 62, 66, 67, 70, 78, 67, 70, 88, 
   89, 98, 99, 101, 98, 99, 103, 101, 98, 99, 105, 101, 98, 99, 107, 101, 
   87, 97, 5, 6, 30, 31, 33, 35, 40, 42, 44, 46, 55, 56, 68, 69, 
   83, 84, 90, 91, 93, 95, 100, 102, 104, 106, 18, 2, 9, 19, 16, 20, 
   18, 2, 9, 1, 2, 4, 1, 2, 6, 4, 1, 2, 8, 4, 1, 2, 
   10, 4, 3, 5, 7, 9, 
};
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "in_pragma", 
   "in_pragma3", 
   "end_pragma3", 
   "in_pragma2", 
   "in_pragma4", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, 2, 5, 3, 0, 
   0, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x43fffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x1000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x2bc0000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[108];
static private final int[] jjstateSet = new int[216];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public Idl2XmlTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public Idl2XmlTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 108; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 97;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 100 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
        Object [] scps = (Object [])Idl2Xml.scopes.peek();
    Element el = (Element)scps[0];
    Element pragma = Idl2Xml.createChild(el, Idl2XmlNames.OMG_pragma);
    pragma.setAttribute(Idl2XmlNames.OMG_pragma_value, image.toString());
         break;
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 94 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
             image.setLength(0);
         break;
      case 96 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                                          image.setLength(0);
         break;
      default : 
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 98 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    String tok = image.toString();
        if (Idl2Xml.newFile(matchedToken.beginLine,true))
        {
                Idl2Xml.beginSpecificationScope();
                //Idl2Xml.beginScope();
        }
        if (tok.equals("\"\""))
        {
                if (!Idl2Xml.prefixes.empty())
                {
                        Object [] pre = (Object [])Idl2Xml.prefixes.pop();
                        pre[0] = tok.substring(1,tok.length()-1);
                        Idl2Xml.prefixes.push(pre);
                }
        }
        else
        {
            if (!Idl2Xml.scopes.empty())
                {
                Object [] scps = (Object [])Idl2Xml.scopes.peek();
                Idl2Xml.prefixes.push(
                                      new Object[]{ tok.substring(1,tok.length()-1),
                                                scps[0] });
                }
        }
         break;
      default : 
         break;
   }
}
}
